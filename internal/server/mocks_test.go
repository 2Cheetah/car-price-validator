// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package server

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockRenderer creates a new instance of MockRenderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRenderer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRenderer {
	mock := &MockRenderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRenderer is an autogenerated mock type for the Renderer type
type MockRenderer struct {
	mock.Mock
}

type MockRenderer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRenderer) EXPECT() *MockRenderer_Expecter {
	return &MockRenderer_Expecter{mock: &_m.Mock}
}

// RenderHTML provides a mock function for the type MockRenderer
func (_mock *MockRenderer) RenderHTML(make string, model string, year string) ([]byte, error) {
	ret := _mock.Called(make, model, year)

	if len(ret) == 0 {
		panic("no return value specified for RenderHTML")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) ([]byte, error)); ok {
		return returnFunc(make, model, year)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string) []byte); ok {
		r0 = returnFunc(make, model, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = returnFunc(make, model, year)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRenderer_RenderHTML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderHTML'
type MockRenderer_RenderHTML_Call struct {
	*mock.Call
}

// RenderHTML is a helper method to define mock.On call
//   - make string
//   - model string
//   - year string
func (_e *MockRenderer_Expecter) RenderHTML(make interface{}, model interface{}, year interface{}) *MockRenderer_RenderHTML_Call {
	return &MockRenderer_RenderHTML_Call{Call: _e.mock.On("RenderHTML", make, model, year)}
}

func (_c *MockRenderer_RenderHTML_Call) Run(run func(make string, model string, year string)) *MockRenderer_RenderHTML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRenderer_RenderHTML_Call) Return(bytes []byte, err error) *MockRenderer_RenderHTML_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockRenderer_RenderHTML_Call) RunAndReturn(run func(make string, model string, year string) ([]byte, error)) *MockRenderer_RenderHTML_Call {
	_c.Call.Return(run)
	return _c
}
